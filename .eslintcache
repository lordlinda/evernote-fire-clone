[{"/home/lord/Documents/pbwealth/evernote-clone/src/index.js":"1","/home/lord/Documents/pbwealth/evernote-clone/src/App.js":"2","/home/lord/Documents/pbwealth/evernote-clone/src/reportWebVitals.js":"3","/home/lord/Documents/pbwealth/evernote-clone/src/AddTodo.js":"4","/home/lord/Documents/pbwealth/evernote-clone/src/TodoList.js":"5","/home/lord/Documents/pbwealth/evernote-clone/src/Todo.js":"6","/home/lord/Documents/pbwealth/evernote-clone/src/editor/editor.js":"7","/home/lord/Documents/pbwealth/evernote-clone/src/sidebar/Sidebar.js":"8","/home/lord/Documents/pbwealth/evernote-clone/src/sidebar/styles.js":"9","/home/lord/Documents/pbwealth/evernote-clone/src/sidebarItem/SidebarItem.js":"10","/home/lord/Documents/pbwealth/evernote-clone/src/sidebarItem/styles.js":"11","/home/lord/Documents/pbwealth/evernote-clone/src/helpers.js":"12","/home/lord/Documents/pbwealth/evernote-clone/src/editor/styles.js":"13","/home/lord/Documents/pbwealth/evernote-clone/src/firebase.js":"14","/home/lord/Documents/pbwealth/evernote-clone/src/editor/Notebook.js":"15","/home/lord/Documents/pbwealth/evernote-clone/src/SignUp.js":"16","/home/lord/Documents/pbwealth/evernote-clone/src/Signin.js":"17"},{"size":500,"mtime":1607824094130,"results":"18","hashOfConfig":"19"},{"size":4966,"mtime":1607858240262,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1607776887817,"results":"21","hashOfConfig":"19"},{"size":636,"mtime":1607779142244,"results":"22","hashOfConfig":"19"},{"size":427,"mtime":1607779831245,"results":"23","hashOfConfig":"19"},{"size":410,"mtime":1607780051978,"results":"24","hashOfConfig":"19"},{"size":4133,"mtime":1607857004847,"results":"25","hashOfConfig":"19"},{"size":5631,"mtime":1607857072227,"results":"26","hashOfConfig":"19"},{"size":1258,"mtime":1607846491304,"results":"27","hashOfConfig":"19"},{"size":1542,"mtime":1607858206613,"results":"28","hashOfConfig":"19"},{"size":316,"mtime":1607859818425,"results":"29","hashOfConfig":"19"},{"size":380,"mtime":1607781282220,"results":"30","hashOfConfig":"19"},{"size":874,"mtime":1607864486887,"results":"31","hashOfConfig":"19"},{"size":658,"mtime":1607824370795,"results":"32","hashOfConfig":"19"},{"size":1724,"mtime":1607853462697,"results":"33","hashOfConfig":"19"},{"size":2119,"mtime":1607854664880,"results":"34","hashOfConfig":"19"},{"size":1984,"mtime":1607864124452,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1vtcv05",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},"/home/lord/Documents/pbwealth/evernote-clone/src/index.js",[],["80","81"],"/home/lord/Documents/pbwealth/evernote-clone/src/App.js",["82","83"],"import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./sidebar/Sidebar\";\nimport Editor from \"./editor/editor\";\nimport firebase from \"firebase\";\nimport db from \"./firebase\";\nimport Signin from \"./Signin\";\nimport SignUp from \"./SignUp\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      notes: [],\n      selectedNote: null,\n      selectedNoteIndex: null,\n      open: true,\n    };\n  }\n  toggleDrawer = () => {\n    this.setState({ ...this.state, open: !this.state.open });\n  };\n  render() {\n    const user = localStorage.getItem(\"user\");\n    return (\n      <>\n        <div className=\"app-container\">\n          <Router>\n            <Switch>\n              <Route exact path=\"/signup\" component={SignUp} />\n              <Route exact path=\"/\" component={Signin} />\n              <Route\n                exact\n                path=\"/home\"\n                render={(props) => (\n                  <Sidebar\n                    {...props}\n                    selectedNoteIndex={this.state.selectedNoteIndex}\n                    notes={this.state.notes}\n                    deleteNote={this.deleteNote}\n                    selectNote={this.selectNote}\n                    newNote={this.newNote}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/note\"\n                render={(props) =>\n                  this.state.selectedNote ? (\n                    <Editor\n                      {...props}\n                      selectedNote={this.state.selectedNote}\n                      selectedNoteIndex={this.state.selectedNoteIndex}\n                      notes={this.state.notes}\n                      noteUpdate={this.noteUpdate}\n                    />\n                  ) : null\n                }\n              />\n            </Switch>\n          </Router>\n        </div>\n      </>\n    );\n  }\n  componentDidMount = () => {\n    db.collection(\"notes\")\n      .where(\"user\", \"==\", localStorage.user ? localStorage.user : \"\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        let notesArr = [];\n        snapshot.docs.map((doc) => {\n          notesArr.push({\n            id: doc.id,\n            title: doc.data().title,\n            body: doc.data().body,\n          });\n          this.setState({ notes: notesArr });\n        });\n      });\n    /**const todos = localStorage.getItem(\"todos\");\n    if (todos) {\n      const savedTodos = JSON.parse(todos);\n      this.setState({ todos: savedTodos });\n    } else {\n      console.log(\"not todos\");\n    }**/\n  };\n  newNote = async (title) => {\n    const note = await db.collection(\"notes\").add({\n      title: title,\n      body: \"\",\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      user: localStorage.user ? localStorage.user : \"\",\n    });\n    const addedNote = {\n      title: title,\n      body: \"\",\n      id: note.id,\n      user: localStorage.user ? localStorage.user : \"\",\n    };\n    await this.setState({ notes: [addedNote, ...this.state.notes] });\n    const newNoteIndex = this.state.notes.indexOf(\n      this.state.notes.filter((_note) => _note.id === addedNote.id)[0]\n    );\n    this.setState({\n      selectedNote: this.state.notes[newNoteIndex],\n      selectedNoteIndex: newNoteIndex,\n    });\n\n    /**console.log(todo);\n    await this.setState({ todos: [...this.state.todos, todo] });\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    **/\n  };\n  noteUpdate = async (id, note) => {\n    firebase.firestore().collection(\"notes\").doc(id).update({\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    /**  const todos = this.state.todos.map((todo) => {\n      if (todo === _todo) {\n        return {\n          text: todo.text,\n          completed: !todo.completed,\n        };\n      } else {\n        return todo;\n      }\n    });\n    console.log(todos);\n    await this.setState({ todos: todos });\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));**/\n  };\n\n  selectNote = (note, index) => {\n    this.setState({\n      selectedNoteIndex: index,\n      selectedNote: note,\n      open: false,\n    });\n  };\n\n  deleteNote = async (note) => {\n    const noteIndex = this.state.notes.indexOf(note);\n    await this.setState({\n      notes: this.state.notes.filter((_note) => _note !== note),\n    });\n    if (this.state.selectedNoteIndex === noteIndex) {\n      this.setState({ selectedNoteIndex: null, selectedNote: null });\n    } else {\n      this.state.notes.length > 1\n        ? this.selectNote(\n            this.state.notes[this.state.selectedNoteIndex - 1],\n            this.state.selectedNoteIndex - 1\n          )\n        : this.setState({ selectedNoteIndex: null, selectedNote: null });\n    }\n\n    firebase.firestore().collection(\"notes\").doc(note.id).delete();\n  };\n}\n","/home/lord/Documents/pbwealth/evernote-clone/src/reportWebVitals.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/AddTodo.js",[],["84","85"],"/home/lord/Documents/pbwealth/evernote-clone/src/TodoList.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/Todo.js",[],["86","87"],"/home/lord/Documents/pbwealth/evernote-clone/src/editor/editor.js",["88","89"],"import React, { Component } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport debounce from \"../helpers\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles.js\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport db from \"../firebase\";\nimport firebase from \"firebase\";\nimport { ListItem, List, ListItemText } from \"@material-ui/core\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { Link } from \"react-router-dom\";\nclass Editor extends Component {\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      title: \"\",\n      id: \"\",\n      notebooks: [],\n      open: false,\n    };\n  }\n  componentDidMount = () => {\n    db.collection(\"notebooks\").onSnapshot((snapshot) => {\n      let notebooksArr = [];\n      snapshot.docs.map((doc) => {\n        notebooksArr.push({\n          id: doc.id,\n          name: doc.data().name,\n          notes: doc.data().notes,\n        });\n        this.setState({ notebooks: notebooksArr });\n      });\n    });\n\n    this.setState({\n      text: this.props.selectedNote.body,\n      title: this.props.selectedNote.title,\n      id: this.props.selectedNote.id,\n    });\n  };\n  componentDidUpdate = () => {\n    /**when the component updates i.e\n     * we ensure that we display what has just been selected\n     * if note we have just selected is not equal to that in the state\n     * we first update the state\n     * to display the new note\n     *\n     */\n    if (this.props.selectedNote.id !== this.state.id) {\n      this.setState({\n        text: this.props.selectedNote.body,\n        title: this.props.selectedNote.title,\n        id: this.props.selectedNote.id,\n      });\n    }\n  };\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.editorContainer}>\n        <Link to=\"/home\">\n          <ArrowBackIosIcon className={classes.editIcon}></ArrowBackIosIcon>\n        </Link>\n\n        <AddIcon\n          className={classes.addIcon}\n          onClick={this.handleClose}\n        ></AddIcon>\n        <Dialog\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-dialog-title\"\n          open={this.state.open}\n        >\n          <DialogTitle id=\"simple-dialog-title\">Add to Notebook</DialogTitle>\n          <List>\n            {this.state.notebooks.map((notebook) => (\n              <ListItem\n                button\n                onClick={() => this.addToNoteBook(notebook)}\n                key={notebook.id}\n              >\n                <ListItemText primary={notebook.name} />\n              </ListItem>\n            ))}\n          </List>\n        </Dialog>\n\n        <input\n          className={classes.titleInput}\n          placeholder=\"Note title...\"\n          value={this.state.title ? this.state.title : \"\"}\n          onChange={(e) => this.updateTitle(e.target.value)}\n        ></input>\n        <ReactQuill\n          theme=\"snow\"\n          value={this.state.text}\n          onChange={this.updateBody}\n        ></ReactQuill>\n      </div>\n    );\n  }\n  //! the reason we have this.update is to wait to bombard our server\n  //!every time  a user types in the input area\n  updateBody = async (val) => {\n    await this.setState({ text: val });\n    this.update();\n  };\n\n  updateTitle = async (txt) => {\n    await this.setState({ title: txt });\n    this.update();\n  };\n  update = debounce(() => {\n    this.props.noteUpdate(this.state.id, {\n      title: this.state.title,\n      body: this.state.text,\n    });\n  }, 1500);\n  addToNoteBook = (notebook) => {\n    console.log(this.state);\n    db.collection(\"notebooks\")\n      .doc(notebook.id)\n      .update({\n        notes: firebase.firestore.FieldValue.arrayUnion({\n          id: this.state.id,\n          title: this.state.title,\n          body: this.state.text,\n        }),\n      })\n      .then((res) => {\n        this.handleClose();\n      });\n  };\n  handleClose = () => {\n    this.setState({ open: !this.state.open });\n  };\n}\nexport default withStyles(styles)(Editor);\n","/home/lord/Documents/pbwealth/evernote-clone/src/sidebar/Sidebar.js",["90","91"],"import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\nimport List from \"@material-ui/core/List\";\nimport {\n  ListItem,\n  Collapse,\n  Button,\n  ListItemText,\n  ListItemIcon,\n  TextField,\n} from \"@material-ui/core\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport SidebarItem from \"../sidebarItem/SidebarItem\";\nimport LibraryBooksIcon from \"@material-ui/icons/LibraryBooks\";\nimport db from \"../firebase\";\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\nimport Notebook from \"../editor/Notebook\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport firebase from \"firebase\";\nclass Sidebar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      addingNote: false,\n      title: null,\n      open: false,\n      openModal: false,\n      notebooks: [],\n      notebook: \"\",\n    };\n  }\n  handleClick = () => {\n    this.setState({ open: !this.state.open });\n  };\n\n  componentDidMount() {\n    db.collection(\"notebooks\")\n      .where(\"user\", \"==\", localStorage.user ? localStorage.user : \"\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        let notebooksArr = [];\n        snapshot.docs.map((doc) => {\n          notebooksArr.push({\n            id: doc.id,\n            name: doc.data().name,\n            notes: doc.data().notes,\n          });\n          this.setState({ notebooks: notebooksArr });\n        });\n      });\n  }\n  handleClose = () => {\n    this.setState({ openModal: !this.state.openModal });\n  };\n  render() {\n    const { classes, notes, selectedNoteIndex } = this.props;\n    return (\n      <div className={classes.sidebarContainer}>\n        <Button onClick={this.newNoteBtnClick} className={classes.newNoteBtn}>\n          {this.state.addingNote ? \"Cancel\" : \"New Note\"}\n        </Button>\n        {this.state.addingNote ? (\n          <div>\n            <input\n              type=\"text\"\n              className={classes.newNoteInput}\n              value={this.state.title}\n              placeholder=\"Enter new note title\"\n              onChange={(e) => this.updateTitle(e.target.value)}\n            />{\" \"}\n            <Button onClick={this.newNote} className={classes.newNoteSubmitBtn}>\n              Submit Note\n            </Button>\n          </div>\n        ) : null}\n        <List>\n          {notes.map((note, index) => (\n            <div className=\"list\" key={index}>\n              <SidebarItem\n                note={note}\n                index={index}\n                selectedNoteIndex={selectedNoteIndex}\n                selectNote={this.selectNote}\n                deleteNote={this.deleteNote}\n                history={this.props.history}\n              />\n            </div>\n          ))}\n          <ListItem button onClick={this.handleClick}>\n            <ListItemIcon>\n              <LibraryBooksIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Notebooks\" />\n            {this.state.open ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              <ListItem>\n                <ListItemIcon>\n                  <LibraryAddIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Create Notebook\"\n                  onClick={this.handleClose}\n                />\n              </ListItem>\n              <Dialog\n                onClose={this.handleClose}\n                aria-labelledby=\"simple-dialog-title\"\n                open={this.state.openModal}\n                className={classes.modal}\n              >\n                <DialogTitle id=\"simple-dialog-title\">\n                  Enter notebook name\n                </DialogTitle>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"name\"\n                  type=\"text\"\n                  className={classes.newNoteBookInput}\n                  value={this.state.notebook}\n                  placeholder=\"Enter new note title\"\n                  onChange={(e) => this.setState({ notebook: e.target.value })}\n                />\n                <Button onClick={this.updateNotebook} color=\"primary\">\n                  ok\n                </Button>\n              </Dialog>\n\n              {this.state.notebooks.map((notebook) => (\n                <Notebook\n                  key={notebook.id}\n                  notebook={notebook}\n                  selectedNoteIndex={selectedNoteIndex}\n                  selectNote={this.selectNote}\n                  deleteNote={this.deleteNote}\n                />\n              ))}\n            </List>\n          </Collapse>\n        </List>\n      </div>\n    );\n  }\n  newNoteBtnClick = () => {\n    this.setState({ addingNote: !this.state.addingNote, title: \"\" });\n  };\n\n  updateTitle = (text) => {\n    this.setState({ title: text });\n  };\n  updateNotebook = () => {\n    const notebook = db.collection(\"notebooks\").add({\n      name: this.state.notebook,\n      notes: [],\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      user: localStorage.user ? localStorage.user : \"\",\n    });\n    this.handleClose();\n  };\n\n  newNote = () => {\n    this.props.newNote(this.state.title);\n    this.setState({ title: \"\", addingNote: false });\n  };\n  selectNote = (note, index) => {\n    this.props.selectNote(note, index);\n  };\n  deleteNote = (note) => {\n    this.props.deleteNote(note);\n  };\n}\nexport default withStyles(styles)(Sidebar);\n",["92","93"],"/home/lord/Documents/pbwealth/evernote-clone/src/sidebar/styles.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/sidebarItem/SidebarItem.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/sidebarItem/styles.js",[],["94","95"],"/home/lord/Documents/pbwealth/evernote-clone/src/helpers.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/editor/styles.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/firebase.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/editor/Notebook.js",[],"/home/lord/Documents/pbwealth/evernote-clone/src/SignUp.js",["96","97","98"],"import React, { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nimport { auth } from \"./firebase\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Link } from \"react-router-dom\";\n\nfunction SignUp(props) {\n  const [data, setData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [open, setOpen] = useState(false);\n  const { email, password } = data;\n  const handleChange = (e) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleClose = () => {\n    setOpen(!open);\n  };\n  const signup = (e) => {\n    e.preventDefault();\n    console.log(data);\n    if (email && password) {\n      auth\n        .createUserWithEmailAndPassword(email, password)\n        .then((authUser) => {\n          console.log(authUser.user);\n          localStorage.setItem(\"user\", authUser.user.uid);\n          props.history.push(\"/home\");\n          setData({\n            email: \"\",\n            password: \"\",\n          });\n          setOpen(!open);\n        })\n        .catch((error) => {\n          alert(error);\n        });\n    } else {\n      alert(\"please fill in all fields\");\n    }\n    setData({\n      email: \"\",\n      password: \"\",\n    });\n  };\n  return (\n    <div style={{ width: \"80%\", margin: \"60px auto\" }}>\n      <h3>Signup</h3>\n      <form onSubmit={signup}>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"email\"\n          type=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={email}\n          fullWidth\n          onChange={handleChange}\n        />\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"password\"\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          fullWidth\n          onChange={handleChange}\n        />\n        <br />\n        <br />\n        <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n          signup\n        </Button>\n      </form>\n\n      <br />\n      <Link to=\"/\">Already have an account</Link>\n    </div>\n  );\n}\n\nexport default SignUp;\n","/home/lord/Documents/pbwealth/evernote-clone/src/Signin.js",["99"],"import React, { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nimport { auth } from \"./firebase\";\nimport { Link } from \"react-router-dom\";\n\nfunction Signin(props) {\n  const [data, setData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [open, setOpen] = useState(false);\n  const { email, password } = data;\n  const handleChange = (e) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleClose = () => {\n    setOpen(!open);\n  };\n  const signup = (e) => {\n    e.preventDefault();\n    console.log(data);\n    if (email && password) {\n      auth\n        .signInWithEmailAndPassword(email, password)\n        .then((authUser) => {\n          localStorage.setItem(\"user\", authUser.user.uid);\n          props.history.push(\"/home\");\n          setData({\n            email: \"\",\n            password: \"\",\n          });\n        })\n        .catch((error) => {\n          alert(error);\n        });\n    } else {\n      alert(\"please fill in all fields\");\n    }\n  };\n  return (\n    <div style={{ width: \"80%\", margin: \"60px auto\" }}>\n      <div>\n        <h3>Signin</h3>\n        <form onSubmit={signup}>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            label=\"Email\"\n            value={email}\n            fullWidth\n            onChange={handleChange}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            fullWidth\n            onChange={handleChange}\n          />\n          <br />\n          <br />\n          <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\n            signin\n          </Button>\n        </form>\n        <br />\n        <Link to=\"/signup\">Dont have an account? SignUp</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Signin;\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":24,"column":11,"nodeType":"106","messageId":"107","endLine":24,"endColumn":15},{"ruleId":"108","severity":1,"message":"109","line":73,"column":33,"nodeType":"110","messageId":"111","endLine":73,"endColumn":35},{"ruleId":"100","replacedBy":"112"},{"ruleId":"102","replacedBy":"113"},{"ruleId":"100","replacedBy":"114"},{"ruleId":"102","replacedBy":"115"},{"ruleId":"104","severity":1,"message":"116","line":6,"column":8,"nodeType":"106","messageId":"107","endLine":6,"endColumn":23},{"ruleId":"108","severity":1,"message":"109","line":29,"column":31,"nodeType":"110","messageId":"111","endLine":29,"endColumn":33},{"ruleId":"108","severity":1,"message":"109","line":45,"column":33,"nodeType":"110","messageId":"111","endLine":45,"endColumn":35},{"ruleId":"104","severity":1,"message":"117","line":157,"column":11,"nodeType":"106","messageId":"107","endLine":157,"endColumn":19},{"ruleId":"100","replacedBy":"118"},{"ruleId":"102","replacedBy":"119"},{"ruleId":"100","replacedBy":"120"},{"ruleId":"102","replacedBy":"121"},{"ruleId":"104","severity":1,"message":"122","line":5,"column":8,"nodeType":"106","messageId":"107","endLine":5,"endColumn":14},{"ruleId":"104","severity":1,"message":"123","line":6,"column":8,"nodeType":"106","messageId":"107","endLine":6,"endColumn":19},{"ruleId":"104","severity":1,"message":"124","line":22,"column":9,"nodeType":"106","messageId":"107","endLine":22,"endColumn":20},{"ruleId":"104","severity":1,"message":"124","line":20,"column":9,"nodeType":"106","messageId":"107","endLine":20,"endColumn":20},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["125"],["126"],["125"],["126"],"'BorderColorIcon' is defined but never used.","'notebook' is assigned a value but never used.",["125"],["126"],["125"],["126"],"'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'handleClose' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]